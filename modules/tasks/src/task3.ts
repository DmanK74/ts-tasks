import { Pair, TODO } from '@flx-learn-ts/utils'

/// Рассчитать среднее арифметическое элементов списка list. Вернуть 0.0, если список пуст
export function mean(list: number[]): number {
    throw TODO
}

/// Найти в заданном списке повторяющиеся элементы и вернуть
/// ассоциативный массив с информацией о числе повторений
/// для каждого повторяющегося элемента.
/// Если элемент встречается только один раз, включать его в результат
/// не следует.
/// 
/// Например:
/// extractRepeats(listOf("a", "b", "a")) -> mapOf("a" to 2)
export function extractRepeats(list: string[]): Map<string, number> {
    throw TODO
}

/// Для заданного списка неотрицательных чисел и числа определить,
/// есть ли в списке пара чисел таких, что их сумма равна заданному числу.
/// Если да, верните их индексы в виде Pair<Int, Int>;
/// если нет, верните пару Pair(-1, -1).
/// 
/// Индексы в результате должны следовать в порядке (меньший, больший).
/// 
/// Постарайтесь сделать ваше решение как можно более эффективным,
/// используя то, что вы узнали в данном уроке.
/// 
/// Например:
/// findSumOfTwo([1, 2, 3], 4) -> Pair(0, 2)
/// findSumOfTwo([1, 2, 3], 6) -> Pair(-1, -1)
export function findSumOfTwo(list: number[], number: number): Pair<number, number> {
    throw TODO
}
